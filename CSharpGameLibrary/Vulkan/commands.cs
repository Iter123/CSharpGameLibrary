//autogenerated on 8/4/2016 8:00:15 PM
using System;

namespace CSGL.Vulkan.Unmanaged {
    public static partial class VK {
        public unsafe delegate VkResult vkCreateInstanceDelegate(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance);
        public static vkCreateInstanceDelegate vkCreateInstance;

        public unsafe delegate void vkDestroyInstanceDelegate(VkInstance instance, VkAllocationCallbacks* pAllocator);
        public static vkDestroyInstanceDelegate vkDestroyInstance;

        public unsafe delegate VkResult vkEnumeratePhysicalDevicesDelegate(VkInstance instance, uint* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);
        public static vkEnumeratePhysicalDevicesDelegate vkEnumeratePhysicalDevices;

        public unsafe delegate IntPtr vkGetDeviceProcAddrDelegate(VkDevice device, byte* pName);
        public static vkGetDeviceProcAddrDelegate vkGetDeviceProcAddr;

        public unsafe delegate IntPtr vkGetInstanceProcAddrDelegate(VkInstance instance, byte* pName);
        public static vkGetInstanceProcAddrDelegate vkGetInstanceProcAddr;

        public unsafe delegate void vkGetPhysicalDevicePropertiesDelegate(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties);
        public static vkGetPhysicalDevicePropertiesDelegate vkGetPhysicalDeviceProperties;

        public unsafe delegate void vkGetPhysicalDeviceQueueFamilyPropertiesDelegate(VkPhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);
        public static vkGetPhysicalDeviceQueueFamilyPropertiesDelegate vkGetPhysicalDeviceQueueFamilyProperties;

        public unsafe delegate void vkGetPhysicalDeviceMemoryPropertiesDelegate(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);
        public static vkGetPhysicalDeviceMemoryPropertiesDelegate vkGetPhysicalDeviceMemoryProperties;

        public unsafe delegate void vkGetPhysicalDeviceFeaturesDelegate(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);
        public static vkGetPhysicalDeviceFeaturesDelegate vkGetPhysicalDeviceFeatures;

        public unsafe delegate void vkGetPhysicalDeviceFormatPropertiesDelegate(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);
        public static vkGetPhysicalDeviceFormatPropertiesDelegate vkGetPhysicalDeviceFormatProperties;

        public unsafe delegate VkResult vkGetPhysicalDeviceImageFormatPropertiesDelegate(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);
        public static vkGetPhysicalDeviceImageFormatPropertiesDelegate vkGetPhysicalDeviceImageFormatProperties;

        public unsafe delegate VkResult vkCreateDeviceDelegate(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice* pDevice);
        public static vkCreateDeviceDelegate vkCreateDevice;

        public unsafe delegate void vkDestroyDeviceDelegate(VkDevice device, VkAllocationCallbacks* pAllocator);
        public static vkDestroyDeviceDelegate vkDestroyDevice;

        public unsafe delegate VkResult vkEnumerateInstanceLayerPropertiesDelegate(uint* pPropertyCount, VkLayerProperties* pProperties);
        public static vkEnumerateInstanceLayerPropertiesDelegate vkEnumerateInstanceLayerProperties;

        public unsafe delegate VkResult vkEnumerateInstanceExtensionPropertiesDelegate(byte* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties);
        public static vkEnumerateInstanceExtensionPropertiesDelegate vkEnumerateInstanceExtensionProperties;

        public unsafe delegate VkResult vkEnumerateDeviceLayerPropertiesDelegate(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkLayerProperties* pProperties);
        public static vkEnumerateDeviceLayerPropertiesDelegate vkEnumerateDeviceLayerProperties;

        public unsafe delegate VkResult vkEnumerateDeviceExtensionPropertiesDelegate(VkPhysicalDevice physicalDevice, byte* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties);
        public static vkEnumerateDeviceExtensionPropertiesDelegate vkEnumerateDeviceExtensionProperties;

        public unsafe delegate void vkGetDeviceQueueDelegate(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue* pQueue);
        public static vkGetDeviceQueueDelegate vkGetDeviceQueue;

        public unsafe delegate VkResult vkQueueSubmitDelegate(VkQueue queue, uint submitCount, VkSubmitInfo* pSubmits, VkFence fence);
        public static vkQueueSubmitDelegate vkQueueSubmit;

        public delegate VkResult vkQueueWaitIdleDelegate(VkQueue queue);
        public static vkQueueWaitIdleDelegate vkQueueWaitIdle;

        public delegate VkResult vkDeviceWaitIdleDelegate(VkDevice device);
        public static vkDeviceWaitIdleDelegate vkDeviceWaitIdle;

        public unsafe delegate VkResult vkAllocateMemoryDelegate(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory);
        public static vkAllocateMemoryDelegate vkAllocateMemory;

        public unsafe delegate void vkFreeMemoryDelegate(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator);
        public static vkFreeMemoryDelegate vkFreeMemory;

        public unsafe delegate VkResult vkMapMemoryDelegate(VkDevice device, VkDeviceMemory memory, ulong offset, ulong size, VkMemoryMapFlags flags, void** ppData);
        public static vkMapMemoryDelegate vkMapMemory;

        public delegate void vkUnmapMemoryDelegate(VkDevice device, VkDeviceMemory memory);
        public static vkUnmapMemoryDelegate vkUnmapMemory;

        public unsafe delegate VkResult vkFlushMappedMemoryRangesDelegate(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges);
        public static vkFlushMappedMemoryRangesDelegate vkFlushMappedMemoryRanges;

        public unsafe delegate VkResult vkInvalidateMappedMemoryRangesDelegate(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges);
        public static vkInvalidateMappedMemoryRangesDelegate vkInvalidateMappedMemoryRanges;

        public unsafe delegate void vkGetDeviceMemoryCommitmentDelegate(VkDevice device, VkDeviceMemory memory, ulong* pCommittedMemoryInBytes);
        public static vkGetDeviceMemoryCommitmentDelegate vkGetDeviceMemoryCommitment;

        public unsafe delegate void vkGetBufferMemoryRequirementsDelegate(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements);
        public static vkGetBufferMemoryRequirementsDelegate vkGetBufferMemoryRequirements;

        public delegate VkResult vkBindBufferMemoryDelegate(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, ulong memoryOffset);
        public static vkBindBufferMemoryDelegate vkBindBufferMemory;

        public unsafe delegate void vkGetImageMemoryRequirementsDelegate(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements);
        public static vkGetImageMemoryRequirementsDelegate vkGetImageMemoryRequirements;

        public delegate VkResult vkBindImageMemoryDelegate(VkDevice device, VkImage image, VkDeviceMemory memory, ulong memoryOffset);
        public static vkBindImageMemoryDelegate vkBindImageMemory;

        public unsafe delegate void vkGetImageSparseMemoryRequirementsDelegate(VkDevice device, VkImage image, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);
        public static vkGetImageSparseMemoryRequirementsDelegate vkGetImageSparseMemoryRequirements;

        public unsafe delegate void vkGetPhysicalDeviceSparseImageFormatPropertiesDelegate(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* pPropertyCount, VkSparseImageFormatProperties* pProperties);
        public static vkGetPhysicalDeviceSparseImageFormatPropertiesDelegate vkGetPhysicalDeviceSparseImageFormatProperties;

        public unsafe delegate VkResult vkQueueBindSparseDelegate(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence);
        public static vkQueueBindSparseDelegate vkQueueBindSparse;

        public unsafe delegate VkResult vkCreateFenceDelegate(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence);
        public static vkCreateFenceDelegate vkCreateFence;

        public unsafe delegate void vkDestroyFenceDelegate(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator);
        public static vkDestroyFenceDelegate vkDestroyFence;

        public unsafe delegate VkResult vkResetFencesDelegate(VkDevice device, uint fenceCount, VkFence* pFences);
        public static vkResetFencesDelegate vkResetFences;

        public delegate VkResult vkGetFenceStatusDelegate(VkDevice device, VkFence fence);
        public static vkGetFenceStatusDelegate vkGetFenceStatus;

        public unsafe delegate VkResult vkWaitForFencesDelegate(VkDevice device, uint fenceCount, VkFence* pFences, uint waitAll, ulong timeout);
        public static vkWaitForFencesDelegate vkWaitForFences;

        public unsafe delegate VkResult vkCreateSemaphoreDelegate(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore);
        public static vkCreateSemaphoreDelegate vkCreateSemaphore;

        public unsafe delegate void vkDestroySemaphoreDelegate(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator);
        public static vkDestroySemaphoreDelegate vkDestroySemaphore;

        public unsafe delegate VkResult vkCreateEventDelegate(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent);
        public static vkCreateEventDelegate vkCreateEvent;

        public unsafe delegate void vkDestroyEventDelegate(VkDevice device, VkEvent _event, VkAllocationCallbacks* pAllocator);
        public static vkDestroyEventDelegate vkDestroyEvent;

        public delegate VkResult vkGetEventStatusDelegate(VkDevice device, VkEvent _event);
        public static vkGetEventStatusDelegate vkGetEventStatus;

        public delegate VkResult vkSetEventDelegate(VkDevice device, VkEvent _event);
        public static vkSetEventDelegate vkSetEvent;

        public delegate VkResult vkResetEventDelegate(VkDevice device, VkEvent _event);
        public static vkResetEventDelegate vkResetEvent;

        public unsafe delegate VkResult vkCreateQueryPoolDelegate(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool);
        public static vkCreateQueryPoolDelegate vkCreateQueryPool;

        public unsafe delegate void vkDestroyQueryPoolDelegate(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator);
        public static vkDestroyQueryPoolDelegate vkDestroyQueryPool;

        public unsafe delegate VkResult vkGetQueryPoolResultsDelegate(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, long dataSize, void* pData, ulong stride, VkQueryResultFlags flags);
        public static vkGetQueryPoolResultsDelegate vkGetQueryPoolResults;

        public unsafe delegate VkResult vkCreateBufferDelegate(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer);
        public static vkCreateBufferDelegate vkCreateBuffer;

        public unsafe delegate void vkDestroyBufferDelegate(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator);
        public static vkDestroyBufferDelegate vkDestroyBuffer;

        public unsafe delegate VkResult vkCreateBufferViewDelegate(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView);
        public static vkCreateBufferViewDelegate vkCreateBufferView;

        public unsafe delegate void vkDestroyBufferViewDelegate(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator);
        public static vkDestroyBufferViewDelegate vkDestroyBufferView;

        public unsafe delegate VkResult vkCreateImageDelegate(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage);
        public static vkCreateImageDelegate vkCreateImage;

        public unsafe delegate void vkDestroyImageDelegate(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator);
        public static vkDestroyImageDelegate vkDestroyImage;

        public unsafe delegate void vkGetImageSubresourceLayoutDelegate(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout);
        public static vkGetImageSubresourceLayoutDelegate vkGetImageSubresourceLayout;

        public unsafe delegate VkResult vkCreateImageViewDelegate(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView);
        public static vkCreateImageViewDelegate vkCreateImageView;

        public unsafe delegate void vkDestroyImageViewDelegate(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator);
        public static vkDestroyImageViewDelegate vkDestroyImageView;

        public unsafe delegate VkResult vkCreateShaderModuleDelegate(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule);
        public static vkCreateShaderModuleDelegate vkCreateShaderModule;

        public unsafe delegate void vkDestroyShaderModuleDelegate(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator);
        public static vkDestroyShaderModuleDelegate vkDestroyShaderModule;

        public unsafe delegate VkResult vkCreatePipelineCacheDelegate(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache);
        public static vkCreatePipelineCacheDelegate vkCreatePipelineCache;

        public unsafe delegate void vkDestroyPipelineCacheDelegate(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator);
        public static vkDestroyPipelineCacheDelegate vkDestroyPipelineCache;

        public unsafe delegate VkResult vkGetPipelineCacheDataDelegate(VkDevice device, VkPipelineCache pipelineCache, ulong* pDataSize, void* pData);
        public static vkGetPipelineCacheDataDelegate vkGetPipelineCacheData;

        public unsafe delegate VkResult vkMergePipelineCachesDelegate(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* pSrcCaches);
        public static vkMergePipelineCachesDelegate vkMergePipelineCaches;

        public unsafe delegate VkResult vkCreateGraphicsPipelinesDelegate(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
        public static vkCreateGraphicsPipelinesDelegate vkCreateGraphicsPipelines;

        public unsafe delegate VkResult vkCreateComputePipelinesDelegate(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
        public static vkCreateComputePipelinesDelegate vkCreateComputePipelines;

        public unsafe delegate void vkDestroyPipelineDelegate(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator);
        public static vkDestroyPipelineDelegate vkDestroyPipeline;

        public unsafe delegate VkResult vkCreatePipelineLayoutDelegate(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout);
        public static vkCreatePipelineLayoutDelegate vkCreatePipelineLayout;

        public unsafe delegate void vkDestroyPipelineLayoutDelegate(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator);
        public static vkDestroyPipelineLayoutDelegate vkDestroyPipelineLayout;

        public unsafe delegate VkResult vkCreateSamplerDelegate(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler);
        public static vkCreateSamplerDelegate vkCreateSampler;

        public unsafe delegate void vkDestroySamplerDelegate(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator);
        public static vkDestroySamplerDelegate vkDestroySampler;

        public unsafe delegate VkResult vkCreateDescriptorSetLayoutDelegate(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout);
        public static vkCreateDescriptorSetLayoutDelegate vkCreateDescriptorSetLayout;

        public unsafe delegate void vkDestroyDescriptorSetLayoutDelegate(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator);
        public static vkDestroyDescriptorSetLayoutDelegate vkDestroyDescriptorSetLayout;

        public unsafe delegate VkResult vkCreateDescriptorPoolDelegate(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool);
        public static vkCreateDescriptorPoolDelegate vkCreateDescriptorPool;

        public unsafe delegate void vkDestroyDescriptorPoolDelegate(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator);
        public static vkDestroyDescriptorPoolDelegate vkDestroyDescriptorPool;

        public delegate VkResult vkResetDescriptorPoolDelegate(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
        public static vkResetDescriptorPoolDelegate vkResetDescriptorPool;

        public unsafe delegate VkResult vkAllocateDescriptorSetsDelegate(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets);
        public static vkAllocateDescriptorSetsDelegate vkAllocateDescriptorSets;

        public unsafe delegate VkResult vkFreeDescriptorSetsDelegate(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets);
        public static vkFreeDescriptorSetsDelegate vkFreeDescriptorSets;

        public unsafe delegate void vkUpdateDescriptorSetsDelegate(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies);
        public static vkUpdateDescriptorSetsDelegate vkUpdateDescriptorSets;

        public unsafe delegate VkResult vkCreateFramebufferDelegate(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer);
        public static vkCreateFramebufferDelegate vkCreateFramebuffer;

        public unsafe delegate void vkDestroyFramebufferDelegate(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator);
        public static vkDestroyFramebufferDelegate vkDestroyFramebuffer;

        public unsafe delegate VkResult vkCreateRenderPassDelegate(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);
        public static vkCreateRenderPassDelegate vkCreateRenderPass;

        public unsafe delegate void vkDestroyRenderPassDelegate(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator);
        public static vkDestroyRenderPassDelegate vkDestroyRenderPass;

        public unsafe delegate void vkGetRenderAreaGranularityDelegate(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity);
        public static vkGetRenderAreaGranularityDelegate vkGetRenderAreaGranularity;

        public unsafe delegate VkResult vkCreateCommandPoolDelegate(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool);
        public static vkCreateCommandPoolDelegate vkCreateCommandPool;

        public unsafe delegate void vkDestroyCommandPoolDelegate(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator);
        public static vkDestroyCommandPoolDelegate vkDestroyCommandPool;

        public delegate VkResult vkResetCommandPoolDelegate(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
        public static vkResetCommandPoolDelegate vkResetCommandPool;

        public unsafe delegate VkResult vkAllocateCommandBuffersDelegate(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers);
        public static vkAllocateCommandBuffersDelegate vkAllocateCommandBuffers;

        public unsafe delegate void vkFreeCommandBuffersDelegate(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* pCommandBuffers);
        public static vkFreeCommandBuffersDelegate vkFreeCommandBuffers;

        public unsafe delegate VkResult vkBeginCommandBufferDelegate(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo);
        public static vkBeginCommandBufferDelegate vkBeginCommandBuffer;

        public delegate VkResult vkEndCommandBufferDelegate(VkCommandBuffer commandBuffer);
        public static vkEndCommandBufferDelegate vkEndCommandBuffer;

        public delegate VkResult vkResetCommandBufferDelegate(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
        public static vkResetCommandBufferDelegate vkResetCommandBuffer;

        public delegate void vkCmdBindPipelineDelegate(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
        public static vkCmdBindPipelineDelegate vkCmdBindPipeline;

        public unsafe delegate void vkCmdSetViewportDelegate(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* pViewports);
        public static vkCmdSetViewportDelegate vkCmdSetViewport;

        public unsafe delegate void vkCmdSetScissorDelegate(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* pScissors);
        public static vkCmdSetScissorDelegate vkCmdSetScissor;

        public delegate void vkCmdSetLineWidthDelegate(VkCommandBuffer commandBuffer, float lineWidth);
        public static vkCmdSetLineWidthDelegate vkCmdSetLineWidth;

        public delegate void vkCmdSetDepthBiasDelegate(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
        public static vkCmdSetDepthBiasDelegate vkCmdSetDepthBias;

        public delegate void vkCmdSetBlendConstantsDelegate(VkCommandBuffer commandBuffer, float blendConstants);
        public static vkCmdSetBlendConstantsDelegate vkCmdSetBlendConstants;

        public delegate void vkCmdSetDepthBoundsDelegate(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
        public static vkCmdSetDepthBoundsDelegate vkCmdSetDepthBounds;

        public delegate void vkCmdSetStencilCompareMaskDelegate(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask);
        public static vkCmdSetStencilCompareMaskDelegate vkCmdSetStencilCompareMask;

        public delegate void vkCmdSetStencilWriteMaskDelegate(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask);
        public static vkCmdSetStencilWriteMaskDelegate vkCmdSetStencilWriteMask;

        public delegate void vkCmdSetStencilReferenceDelegate(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference);
        public static vkCmdSetStencilReferenceDelegate vkCmdSetStencilReference;

        public unsafe delegate void vkCmdBindDescriptorSetsDelegate(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets);
        public static vkCmdBindDescriptorSetsDelegate vkCmdBindDescriptorSets;

        public delegate void vkCmdBindIndexBufferDelegate(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkIndexType indexType);
        public static vkCmdBindIndexBufferDelegate vkCmdBindIndexBuffer;

        public unsafe delegate void vkCmdBindVertexBuffersDelegate(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, ulong* pOffsets);
        public static vkCmdBindVertexBuffersDelegate vkCmdBindVertexBuffers;

        public delegate void vkCmdDrawDelegate(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        public static vkCmdDrawDelegate vkCmdDraw;

        public delegate void vkCmdDrawIndexedDelegate(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
        public static vkCmdDrawIndexedDelegate vkCmdDrawIndexed;

        public delegate void vkCmdDrawIndirectDelegate(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride);
        public static vkCmdDrawIndirectDelegate vkCmdDrawIndirect;

        public delegate void vkCmdDrawIndexedIndirectDelegate(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride);
        public static vkCmdDrawIndexedIndirectDelegate vkCmdDrawIndexedIndirect;

        public delegate void vkCmdDispatchDelegate(VkCommandBuffer commandBuffer, uint x, uint y, uint z);
        public static vkCmdDispatchDelegate vkCmdDispatch;

        public delegate void vkCmdDispatchIndirectDelegate(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset);
        public static vkCmdDispatchIndirectDelegate vkCmdDispatchIndirect;

        public unsafe delegate void vkCmdCopyBufferDelegate(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* pRegions);
        public static vkCmdCopyBufferDelegate vkCmdCopyBuffer;

        public unsafe delegate void vkCmdCopyImageDelegate(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* pRegions);
        public static vkCmdCopyImageDelegate vkCmdCopyImage;

        public unsafe delegate void vkCmdBlitImageDelegate(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* pRegions, VkFilter filter);
        public static vkCmdBlitImageDelegate vkCmdBlitImage;

        public unsafe delegate void vkCmdCopyBufferToImageDelegate(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* pRegions);
        public static vkCmdCopyBufferToImageDelegate vkCmdCopyBufferToImage;

        public unsafe delegate void vkCmdCopyImageToBufferDelegate(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* pRegions);
        public static vkCmdCopyImageToBufferDelegate vkCmdCopyImageToBuffer;

        public unsafe delegate void vkCmdUpdateBufferDelegate(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, ulong dstOffset, ulong dataSize, void* pData);
        public static vkCmdUpdateBufferDelegate vkCmdUpdateBuffer;

        public delegate void vkCmdFillBufferDelegate(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, ulong dstOffset, ulong size, uint data);
        public static vkCmdFillBufferDelegate vkCmdFillBuffer;

        public unsafe delegate void vkCmdClearColorImageDelegate(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint rangeCount, VkImageSubresourceRange* pRanges);
        public static vkCmdClearColorImageDelegate vkCmdClearColorImage;

        public unsafe delegate void vkCmdClearDepthStencilImageDelegate(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint rangeCount, VkImageSubresourceRange* pRanges);
        public static vkCmdClearDepthStencilImageDelegate vkCmdClearDepthStencilImage;

        public unsafe delegate void vkCmdClearAttachmentsDelegate(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* pAttachments, uint rectCount, VkClearRect* pRects);
        public static vkCmdClearAttachmentsDelegate vkCmdClearAttachments;

        public unsafe delegate void vkCmdResolveImageDelegate(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* pRegions);
        public static vkCmdResolveImageDelegate vkCmdResolveImage;

        public delegate void vkCmdSetEventDelegate(VkCommandBuffer commandBuffer, VkEvent _event, VkPipelineStageFlags stageMask);
        public static vkCmdSetEventDelegate vkCmdSetEvent;

        public delegate void vkCmdResetEventDelegate(VkCommandBuffer commandBuffer, VkEvent _event, VkPipelineStageFlags stageMask);
        public static vkCmdResetEventDelegate vkCmdResetEvent;

        public unsafe delegate void vkCmdWaitEventsDelegate(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers);
        public static vkCmdWaitEventsDelegate vkCmdWaitEvents;

        public unsafe delegate void vkCmdPipelineBarrierDelegate(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers);
        public static vkCmdPipelineBarrierDelegate vkCmdPipelineBarrier;

        public delegate void vkCmdBeginQueryDelegate(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags);
        public static vkCmdBeginQueryDelegate vkCmdBeginQuery;

        public delegate void vkCmdEndQueryDelegate(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query);
        public static vkCmdEndQueryDelegate vkCmdEndQuery;

        public delegate void vkCmdResetQueryPoolDelegate(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount);
        public static vkCmdResetQueryPoolDelegate vkCmdResetQueryPool;

        public delegate void vkCmdWriteTimestampDelegate(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query);
        public static vkCmdWriteTimestampDelegate vkCmdWriteTimestamp;

        public delegate void vkCmdCopyQueryPoolResultsDelegate(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, ulong dstOffset, ulong stride, VkQueryResultFlags flags);
        public static vkCmdCopyQueryPoolResultsDelegate vkCmdCopyQueryPoolResults;

        public unsafe delegate void vkCmdPushConstantsDelegate(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues);
        public static vkCmdPushConstantsDelegate vkCmdPushConstants;

        public unsafe delegate void vkCmdBeginRenderPassDelegate(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);
        public static vkCmdBeginRenderPassDelegate vkCmdBeginRenderPass;

        public delegate void vkCmdNextSubpassDelegate(VkCommandBuffer commandBuffer, VkSubpassContents contents);
        public static vkCmdNextSubpassDelegate vkCmdNextSubpass;

        public delegate void vkCmdEndRenderPassDelegate(VkCommandBuffer commandBuffer);
        public static vkCmdEndRenderPassDelegate vkCmdEndRenderPass;

        public unsafe delegate void vkCmdExecuteCommandsDelegate(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* pCommandBuffers);
        public static vkCmdExecuteCommandsDelegate vkCmdExecuteCommands;

        public unsafe delegate VkResult vkGetPhysicalDeviceDisplayPropertiesKHRDelegate(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayPropertiesKHR* pProperties);
        public static vkGetPhysicalDeviceDisplayPropertiesKHRDelegate vkGetPhysicalDeviceDisplayPropertiesKHR;

        public unsafe delegate VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHRDelegate(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties);
        public static vkGetPhysicalDeviceDisplayPlanePropertiesKHRDelegate vkGetPhysicalDeviceDisplayPlanePropertiesKHR;

        public unsafe delegate VkResult vkGetDisplayPlaneSupportedDisplaysKHRDelegate(VkPhysicalDevice physicalDevice, uint planeIndex, uint* pDisplayCount, VkDisplayKHR* pDisplays);
        public static vkGetDisplayPlaneSupportedDisplaysKHRDelegate vkGetDisplayPlaneSupportedDisplaysKHR;

        public unsafe delegate VkResult vkGetDisplayModePropertiesKHRDelegate(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* pPropertyCount, VkDisplayModePropertiesKHR* pProperties);
        public static vkGetDisplayModePropertiesKHRDelegate vkGetDisplayModePropertiesKHR;

        public unsafe delegate VkResult vkCreateDisplayModeKHRDelegate(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode);
        public static vkCreateDisplayModeKHRDelegate vkCreateDisplayModeKHR;

        public unsafe delegate VkResult vkGetDisplayPlaneCapabilitiesKHRDelegate(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities);
        public static vkGetDisplayPlaneCapabilitiesKHRDelegate vkGetDisplayPlaneCapabilitiesKHR;

        public unsafe delegate VkResult vkCreateDisplayPlaneSurfaceKHRDelegate(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
        public static vkCreateDisplayPlaneSurfaceKHRDelegate vkCreateDisplayPlaneSurfaceKHR;

        public unsafe delegate VkResult vkCreateSharedSwapchainsKHRDelegate(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains);
        public static vkCreateSharedSwapchainsKHRDelegate vkCreateSharedSwapchainsKHR;

        public unsafe delegate void vkDestroySurfaceKHRDelegate(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* pAllocator);
        public static vkDestroySurfaceKHRDelegate vkDestroySurfaceKHR;

        public unsafe delegate VkResult vkGetPhysicalDeviceSurfaceSupportKHRDelegate(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, uint* pSupported);
        public static vkGetPhysicalDeviceSurfaceSupportKHRDelegate vkGetPhysicalDeviceSurfaceSupportKHR;

        public unsafe delegate VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHRDelegate(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);
        public static vkGetPhysicalDeviceSurfaceCapabilitiesKHRDelegate vkGetPhysicalDeviceSurfaceCapabilitiesKHR;

        public unsafe delegate VkResult vkGetPhysicalDeviceSurfaceFormatsKHRDelegate(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);
        public static vkGetPhysicalDeviceSurfaceFormatsKHRDelegate vkGetPhysicalDeviceSurfaceFormatsKHR;

        public unsafe delegate VkResult vkGetPhysicalDeviceSurfacePresentModesKHRDelegate(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pPresentModeCount, VkPresentModeKHR* pPresentModes);
        public static vkGetPhysicalDeviceSurfacePresentModesKHRDelegate vkGetPhysicalDeviceSurfacePresentModesKHR;

        public unsafe delegate VkResult vkCreateSwapchainKHRDelegate(VkDevice device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain);
        public static vkCreateSwapchainKHRDelegate vkCreateSwapchainKHR;

        public unsafe delegate void vkDestroySwapchainKHRDelegate(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* pAllocator);
        public static vkDestroySwapchainKHRDelegate vkDestroySwapchainKHR;

        public unsafe delegate VkResult vkGetSwapchainImagesKHRDelegate(VkDevice device, VkSwapchainKHR swapchain, uint* pSwapchainImageCount, VkImage* pSwapchainImages);
        public static vkGetSwapchainImagesKHRDelegate vkGetSwapchainImagesKHR;

        public unsafe delegate VkResult vkAcquireNextImageKHRDelegate(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, uint* pImageIndex);
        public static vkAcquireNextImageKHRDelegate vkAcquireNextImageKHR;

        public unsafe delegate VkResult vkQueuePresentKHRDelegate(VkQueue queue, VkPresentInfoKHR* pPresentInfo);
        public static vkQueuePresentKHRDelegate vkQueuePresentKHR;

        public unsafe delegate VkResult vkCreateWin32SurfaceKHRDelegate(VkInstance instance, VkWin32SurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
        public static vkCreateWin32SurfaceKHRDelegate vkCreateWin32SurfaceKHR;

        public delegate uint vkGetPhysicalDeviceWin32PresentationSupportKHRDelegate(VkPhysicalDevice physicalDevice, uint queueFamilyIndex);
        public static vkGetPhysicalDeviceWin32PresentationSupportKHRDelegate vkGetPhysicalDeviceWin32PresentationSupportKHR;

        public unsafe delegate VkResult vkCreateDebugReportCallbackEXTDelegate(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback);
        public static vkCreateDebugReportCallbackEXTDelegate vkCreateDebugReportCallbackEXT;

        public unsafe delegate void vkDestroyDebugReportCallbackEXTDelegate(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* pAllocator);
        public static vkDestroyDebugReportCallbackEXTDelegate vkDestroyDebugReportCallbackEXT;

        public unsafe delegate void vkDebugReportMessageEXTDelegate(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong _object, long location, int messageCode, byte* pLayerPrefix, byte* pMessage);
        public static vkDebugReportMessageEXTDelegate vkDebugReportMessageEXT;

    }
}
