//autogenerated on 8/10/2016 10:49:06 PM
using System;
using System.Security;
using System.Runtime.InteropServices;

namespace CSGL.Vulkan.Unmanaged {
    public static partial class VK {
        public static vkCreateInstanceDelegate CreateInstance;
        public static vkDestroyInstanceDelegate DestroyInstance;
        public static vkEnumeratePhysicalDevicesDelegate EnumeratePhysicalDevices;
        public static vkGetDeviceProcAddrDelegate GetDeviceProcAddr;
        public static vkGetInstanceProcAddrDelegate GetInstanceProcAddr;
        public static vkGetPhysicalDevicePropertiesDelegate GetPhysicalDeviceProperties;
        public static vkGetPhysicalDeviceQueueFamilyPropertiesDelegate GetPhysicalDeviceQueueFamilyProperties;
        public static vkGetPhysicalDeviceMemoryPropertiesDelegate GetPhysicalDeviceMemoryProperties;
        public static vkGetPhysicalDeviceFeaturesDelegate GetPhysicalDeviceFeatures;
        public static vkGetPhysicalDeviceFormatPropertiesDelegate GetPhysicalDeviceFormatProperties;
        public static vkGetPhysicalDeviceImageFormatPropertiesDelegate GetPhysicalDeviceImageFormatProperties;
        public static vkCreateDeviceDelegate CreateDevice;
        public static vkDestroyDeviceDelegate DestroyDevice;
        public static vkEnumerateInstanceLayerPropertiesDelegate EnumerateInstanceLayerProperties;
        public static vkEnumerateInstanceExtensionPropertiesDelegate EnumerateInstanceExtensionProperties;
        public static vkEnumerateDeviceLayerPropertiesDelegate EnumerateDeviceLayerProperties;
        public static vkEnumerateDeviceExtensionPropertiesDelegate EnumerateDeviceExtensionProperties;
        public static vkGetDeviceQueueDelegate GetDeviceQueue;
        public static vkQueueSubmitDelegate QueueSubmit;
        public static vkQueueWaitIdleDelegate QueueWaitIdle;
        public static vkDeviceWaitIdleDelegate DeviceWaitIdle;
        public static vkAllocateMemoryDelegate AllocateMemory;
        public static vkFreeMemoryDelegate FreeMemory;
        public static vkMapMemoryDelegate MapMemory;
        public static vkUnmapMemoryDelegate UnmapMemory;
        public static vkFlushMappedMemoryRangesDelegate FlushMappedMemoryRanges;
        public static vkInvalidateMappedMemoryRangesDelegate InvalidateMappedMemoryRanges;
        public static vkGetDeviceMemoryCommitmentDelegate GetDeviceMemoryCommitment;
        public static vkGetBufferMemoryRequirementsDelegate GetBufferMemoryRequirements;
        public static vkBindBufferMemoryDelegate BindBufferMemory;
        public static vkGetImageMemoryRequirementsDelegate GetImageMemoryRequirements;
        public static vkBindImageMemoryDelegate BindImageMemory;
        public static vkGetImageSparseMemoryRequirementsDelegate GetImageSparseMemoryRequirements;
        public static vkGetPhysicalDeviceSparseImageFormatPropertiesDelegate GetPhysicalDeviceSparseImageFormatProperties;
        public static vkQueueBindSparseDelegate QueueBindSparse;
        public static vkCreateFenceDelegate CreateFence;
        public static vkDestroyFenceDelegate DestroyFence;
        public static vkResetFencesDelegate ResetFences;
        public static vkGetFenceStatusDelegate GetFenceStatus;
        public static vkWaitForFencesDelegate WaitForFences;
        public static vkCreateSemaphoreDelegate CreateSemaphore;
        public static vkDestroySemaphoreDelegate DestroySemaphore;
        public static vkCreateEventDelegate CreateEvent;
        public static vkDestroyEventDelegate DestroyEvent;
        public static vkGetEventStatusDelegate GetEventStatus;
        public static vkSetEventDelegate SetEvent;
        public static vkResetEventDelegate ResetEvent;
        public static vkCreateQueryPoolDelegate CreateQueryPool;
        public static vkDestroyQueryPoolDelegate DestroyQueryPool;
        public static vkGetQueryPoolResultsDelegate GetQueryPoolResults;
        public static vkCreateBufferDelegate CreateBuffer;
        public static vkDestroyBufferDelegate DestroyBuffer;
        public static vkCreateBufferViewDelegate CreateBufferView;
        public static vkDestroyBufferViewDelegate DestroyBufferView;
        public static vkCreateImageDelegate CreateImage;
        public static vkDestroyImageDelegate DestroyImage;
        public static vkGetImageSubresourceLayoutDelegate GetImageSubresourceLayout;
        public static vkCreateImageViewDelegate CreateImageView;
        public static vkDestroyImageViewDelegate DestroyImageView;
        public static vkCreateShaderModuleDelegate CreateShaderModule;
        public static vkDestroyShaderModuleDelegate DestroyShaderModule;
        public static vkCreatePipelineCacheDelegate CreatePipelineCache;
        public static vkDestroyPipelineCacheDelegate DestroyPipelineCache;
        public static vkGetPipelineCacheDataDelegate GetPipelineCacheData;
        public static vkMergePipelineCachesDelegate MergePipelineCaches;
        public static vkCreateGraphicsPipelinesDelegate CreateGraphicsPipelines;
        public static vkCreateComputePipelinesDelegate CreateComputePipelines;
        public static vkDestroyPipelineDelegate DestroyPipeline;
        public static vkCreatePipelineLayoutDelegate CreatePipelineLayout;
        public static vkDestroyPipelineLayoutDelegate DestroyPipelineLayout;
        public static vkCreateSamplerDelegate CreateSampler;
        public static vkDestroySamplerDelegate DestroySampler;
        public static vkCreateDescriptorSetLayoutDelegate CreateDescriptorSetLayout;
        public static vkDestroyDescriptorSetLayoutDelegate DestroyDescriptorSetLayout;
        public static vkCreateDescriptorPoolDelegate CreateDescriptorPool;
        public static vkDestroyDescriptorPoolDelegate DestroyDescriptorPool;
        public static vkResetDescriptorPoolDelegate ResetDescriptorPool;
        public static vkAllocateDescriptorSetsDelegate AllocateDescriptorSets;
        public static vkFreeDescriptorSetsDelegate FreeDescriptorSets;
        public static vkUpdateDescriptorSetsDelegate UpdateDescriptorSets;
        public static vkCreateFramebufferDelegate CreateFramebuffer;
        public static vkDestroyFramebufferDelegate DestroyFramebuffer;
        public static vkCreateRenderPassDelegate CreateRenderPass;
        public static vkDestroyRenderPassDelegate DestroyRenderPass;
        public static vkGetRenderAreaGranularityDelegate GetRenderAreaGranularity;
        public static vkCreateCommandPoolDelegate CreateCommandPool;
        public static vkDestroyCommandPoolDelegate DestroyCommandPool;
        public static vkResetCommandPoolDelegate ResetCommandPool;
        public static vkAllocateCommandBuffersDelegate AllocateCommandBuffers;
        public static vkFreeCommandBuffersDelegate FreeCommandBuffers;
        public static vkBeginCommandBufferDelegate BeginCommandBuffer;
        public static vkEndCommandBufferDelegate EndCommandBuffer;
        public static vkResetCommandBufferDelegate ResetCommandBuffer;
        public static vkCmdBindPipelineDelegate CmdBindPipeline;
        public static vkCmdSetViewportDelegate CmdSetViewport;
        public static vkCmdSetScissorDelegate CmdSetScissor;
        public static vkCmdSetLineWidthDelegate CmdSetLineWidth;
        public static vkCmdSetDepthBiasDelegate CmdSetDepthBias;
        public static vkCmdSetBlendConstantsDelegate CmdSetBlendConstants;
        public static vkCmdSetDepthBoundsDelegate CmdSetDepthBounds;
        public static vkCmdSetStencilCompareMaskDelegate CmdSetStencilCompareMask;
        public static vkCmdSetStencilWriteMaskDelegate CmdSetStencilWriteMask;
        public static vkCmdSetStencilReferenceDelegate CmdSetStencilReference;
        public static vkCmdBindDescriptorSetsDelegate CmdBindDescriptorSets;
        public static vkCmdBindIndexBufferDelegate CmdBindIndexBuffer;
        public static vkCmdBindVertexBuffersDelegate CmdBindVertexBuffers;
        public static vkCmdDrawDelegate CmdDraw;
        public static vkCmdDrawIndexedDelegate CmdDrawIndexed;
        public static vkCmdDrawIndirectDelegate CmdDrawIndirect;
        public static vkCmdDrawIndexedIndirectDelegate CmdDrawIndexedIndirect;
        public static vkCmdDispatchDelegate CmdDispatch;
        public static vkCmdDispatchIndirectDelegate CmdDispatchIndirect;
        public static vkCmdCopyBufferDelegate CmdCopyBuffer;
        public static vkCmdCopyImageDelegate CmdCopyImage;
        public static vkCmdBlitImageDelegate CmdBlitImage;
        public static vkCmdCopyBufferToImageDelegate CmdCopyBufferToImage;
        public static vkCmdCopyImageToBufferDelegate CmdCopyImageToBuffer;
        public static vkCmdUpdateBufferDelegate CmdUpdateBuffer;
        public static vkCmdFillBufferDelegate CmdFillBuffer;
        public static vkCmdClearColorImageDelegate CmdClearColorImage;
        public static vkCmdClearDepthStencilImageDelegate CmdClearDepthStencilImage;
        public static vkCmdClearAttachmentsDelegate CmdClearAttachments;
        public static vkCmdResolveImageDelegate CmdResolveImage;
        public static vkCmdSetEventDelegate CmdSetEvent;
        public static vkCmdResetEventDelegate CmdResetEvent;
        public static vkCmdWaitEventsDelegate CmdWaitEvents;
        public static vkCmdPipelineBarrierDelegate CmdPipelineBarrier;
        public static vkCmdBeginQueryDelegate CmdBeginQuery;
        public static vkCmdEndQueryDelegate CmdEndQuery;
        public static vkCmdResetQueryPoolDelegate CmdResetQueryPool;
        public static vkCmdWriteTimestampDelegate CmdWriteTimestamp;
        public static vkCmdCopyQueryPoolResultsDelegate CmdCopyQueryPoolResults;
        public static vkCmdPushConstantsDelegate CmdPushConstants;
        public static vkCmdBeginRenderPassDelegate CmdBeginRenderPass;
        public static vkCmdNextSubpassDelegate CmdNextSubpass;
        public static vkCmdEndRenderPassDelegate CmdEndRenderPass;
        public static vkCmdExecuteCommandsDelegate CmdExecuteCommands;
        public static vkGetPhysicalDeviceDisplayPropertiesKHRDelegate GetPhysicalDeviceDisplayPropertiesKHR;
        public static vkGetPhysicalDeviceDisplayPlanePropertiesKHRDelegate GetPhysicalDeviceDisplayPlanePropertiesKHR;
        public static vkGetDisplayPlaneSupportedDisplaysKHRDelegate GetDisplayPlaneSupportedDisplaysKHR;
        public static vkGetDisplayModePropertiesKHRDelegate GetDisplayModePropertiesKHR;
        public static vkCreateDisplayModeKHRDelegate CreateDisplayModeKHR;
        public static vkGetDisplayPlaneCapabilitiesKHRDelegate GetDisplayPlaneCapabilitiesKHR;
        public static vkCreateDisplayPlaneSurfaceKHRDelegate CreateDisplayPlaneSurfaceKHR;
        public static vkCreateSharedSwapchainsKHRDelegate CreateSharedSwapchainsKHR;
        public static vkDestroySurfaceKHRDelegate DestroySurfaceKHR;
        public static vkGetPhysicalDeviceSurfaceSupportKHRDelegate GetPhysicalDeviceSurfaceSupportKHR;
        public static vkGetPhysicalDeviceSurfaceCapabilitiesKHRDelegate GetPhysicalDeviceSurfaceCapabilitiesKHR;
        public static vkGetPhysicalDeviceSurfaceFormatsKHRDelegate GetPhysicalDeviceSurfaceFormatsKHR;
        public static vkGetPhysicalDeviceSurfacePresentModesKHRDelegate GetPhysicalDeviceSurfacePresentModesKHR;
        public static vkCreateSwapchainKHRDelegate CreateSwapchainKHR;
        public static vkDestroySwapchainKHRDelegate DestroySwapchainKHR;
        public static vkGetSwapchainImagesKHRDelegate GetSwapchainImagesKHR;
        public static vkAcquireNextImageKHRDelegate AcquireNextImageKHR;
        public static vkQueuePresentKHRDelegate QueuePresentKHR;
        public static vkCreateWin32SurfaceKHRDelegate CreateWin32SurfaceKHR;
        public static vkGetPhysicalDeviceWin32PresentationSupportKHRDelegate GetPhysicalDeviceWin32PresentationSupportKHR;
        public static vkCreateDebugReportCallbackEXTDelegate CreateDebugReportCallbackEXT;
        public static vkDestroyDebugReportCallbackEXTDelegate DestroyDebugReportCallbackEXT;
        public static vkDebugReportMessageEXTDelegate DebugReportMessageEXT;
    }
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateInstanceDelegate(ref VkInstanceCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkInstance pInstance);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyInstanceDelegate(VkInstance instance, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkEnumeratePhysicalDevicesDelegate(VkInstance instance, ref uint pPhysicalDeviceCount, ref VkPhysicalDevice pPhysicalDevices);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate IntPtr vkGetDeviceProcAddrDelegate(VkDevice device, byte* pName);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate IntPtr vkGetInstanceProcAddrDelegate(VkInstance instance, byte* pName);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetPhysicalDevicePropertiesDelegate(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceProperties pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetPhysicalDeviceQueueFamilyPropertiesDelegate(VkPhysicalDevice physicalDevice, ref uint pQueueFamilyPropertyCount, ref VkQueueFamilyProperties pQueueFamilyProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetPhysicalDeviceMemoryPropertiesDelegate(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceMemoryProperties pMemoryProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetPhysicalDeviceFeaturesDelegate(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceFeatures pFeatures);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetPhysicalDeviceFormatPropertiesDelegate(VkPhysicalDevice physicalDevice, VkFormat format, ref VkFormatProperties pFormatProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetPhysicalDeviceImageFormatPropertiesDelegate(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, ref VkImageFormatProperties pImageFormatProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateDeviceDelegate(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDevice pDevice);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyDeviceDelegate(VkDevice device, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkEnumerateInstanceLayerPropertiesDelegate(ref uint pPropertyCount, ref VkLayerProperties pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkEnumerateInstanceExtensionPropertiesDelegate(byte* pLayerName, ref uint pPropertyCount, ref VkExtensionProperties pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkEnumerateDeviceLayerPropertiesDelegate(VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref VkLayerProperties pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkEnumerateDeviceExtensionPropertiesDelegate(VkPhysicalDevice physicalDevice, byte* pLayerName, ref uint pPropertyCount, ref VkExtensionProperties pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetDeviceQueueDelegate(VkDevice device, uint queueFamilyIndex, uint queueIndex, ref VkQueue pQueue);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkQueueSubmitDelegate(VkQueue queue, uint submitCount, ref VkSubmitInfo pSubmits, VkFence fence);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkQueueWaitIdleDelegate(VkQueue queue);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkDeviceWaitIdleDelegate(VkDevice device);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkAllocateMemoryDelegate(VkDevice device, ref VkMemoryAllocateInfo pAllocateInfo, VkAllocationCallbacks* pAllocator, ref VkDeviceMemory pMemory);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkFreeMemoryDelegate(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkMapMemoryDelegate(VkDevice device, VkDeviceMemory memory, ulong offset, ulong size, VkMemoryMapFlags flags, void** ppData);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkUnmapMemoryDelegate(VkDevice device, VkDeviceMemory memory);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkFlushMappedMemoryRangesDelegate(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange pMemoryRanges);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkInvalidateMappedMemoryRangesDelegate(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange pMemoryRanges);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetDeviceMemoryCommitmentDelegate(VkDevice device, VkDeviceMemory memory, ref ulong pCommittedMemoryInBytes);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetBufferMemoryRequirementsDelegate(VkDevice device, VkBuffer buffer, ref VkMemoryRequirements pMemoryRequirements);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkBindBufferMemoryDelegate(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, ulong memoryOffset);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetImageMemoryRequirementsDelegate(VkDevice device, VkImage image, ref VkMemoryRequirements pMemoryRequirements);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkBindImageMemoryDelegate(VkDevice device, VkImage image, VkDeviceMemory memory, ulong memoryOffset);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetImageSparseMemoryRequirementsDelegate(VkDevice device, VkImage image, ref uint pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements pSparseMemoryRequirements);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetPhysicalDeviceSparseImageFormatPropertiesDelegate(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint pPropertyCount, ref VkSparseImageFormatProperties pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkQueueBindSparseDelegate(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo pBindInfo, VkFence fence);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateFenceDelegate(VkDevice device, ref VkFenceCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkFence pFence);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyFenceDelegate(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkResetFencesDelegate(VkDevice device, uint fenceCount, ref VkFence pFences);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetFenceStatusDelegate(VkDevice device, VkFence fence);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkWaitForFencesDelegate(VkDevice device, uint fenceCount, ref VkFence pFences, bool waitAll, ulong timeout);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateSemaphoreDelegate(VkDevice device, ref VkSemaphoreCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSemaphore pSemaphore);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroySemaphoreDelegate(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateEventDelegate(VkDevice device, ref VkEventCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkEvent pEvent);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyEventDelegate(VkDevice device, VkEvent _event, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetEventStatusDelegate(VkDevice device, VkEvent _event);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkSetEventDelegate(VkDevice device, VkEvent _event);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkResetEventDelegate(VkDevice device, VkEvent _event);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateQueryPoolDelegate(VkDevice device, ref VkQueryPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkQueryPool pQueryPool);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyQueryPoolDelegate(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkGetQueryPoolResultsDelegate(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, ulong stride, VkQueryResultFlags flags);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateBufferDelegate(VkDevice device, ref VkBufferCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkBuffer pBuffer);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyBufferDelegate(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateBufferViewDelegate(VkDevice device, ref VkBufferViewCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkBufferView pView);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyBufferViewDelegate(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateImageDelegate(VkDevice device, ref VkImageCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkImage pImage);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyImageDelegate(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetImageSubresourceLayoutDelegate(VkDevice device, VkImage image, ref VkImageSubresource pSubresource, ref VkSubresourceLayout pLayout);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateImageViewDelegate(VkDevice device, ref VkImageViewCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkImageView pView);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyImageViewDelegate(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateShaderModuleDelegate(VkDevice device, ref VkShaderModuleCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkShaderModule pShaderModule);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyShaderModuleDelegate(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreatePipelineCacheDelegate(VkDevice device, ref VkPipelineCacheCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkPipelineCache pPipelineCache);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyPipelineCacheDelegate(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkGetPipelineCacheDataDelegate(VkDevice device, VkPipelineCache pipelineCache, ref ulong pDataSize, void* pData);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkMergePipelineCachesDelegate(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, ref VkPipelineCache pSrcCaches);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateGraphicsPipelinesDelegate(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo pCreateInfos, VkAllocationCallbacks* pAllocator, ref VkPipeline pPipelines);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateComputePipelinesDelegate(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo pCreateInfos, VkAllocationCallbacks* pAllocator, ref VkPipeline pPipelines);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyPipelineDelegate(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreatePipelineLayoutDelegate(VkDevice device, ref VkPipelineLayoutCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkPipelineLayout pPipelineLayout);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyPipelineLayoutDelegate(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateSamplerDelegate(VkDevice device, ref VkSamplerCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSampler pSampler);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroySamplerDelegate(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateDescriptorSetLayoutDelegate(VkDevice device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDescriptorSetLayout pSetLayout);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyDescriptorSetLayoutDelegate(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateDescriptorPoolDelegate(VkDevice device, ref VkDescriptorPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDescriptorPool pDescriptorPool);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyDescriptorPoolDelegate(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkResetDescriptorPoolDelegate(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkAllocateDescriptorSetsDelegate(VkDevice device, ref VkDescriptorSetAllocateInfo pAllocateInfo, ref VkDescriptorSet pDescriptorSets);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkFreeDescriptorSetsDelegate(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, ref VkDescriptorSet pDescriptorSets);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkUpdateDescriptorSetsDelegate(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet pDescriptorCopies);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateFramebufferDelegate(VkDevice device, ref VkFramebufferCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkFramebuffer pFramebuffer);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyFramebufferDelegate(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateRenderPassDelegate(VkDevice device, ref VkRenderPassCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkRenderPass pRenderPass);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyRenderPassDelegate(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkGetRenderAreaGranularityDelegate(VkDevice device, VkRenderPass renderPass, ref VkExtent2D pGranularity);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateCommandPoolDelegate(VkDevice device, ref VkCommandPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkCommandPool pCommandPool);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyCommandPoolDelegate(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkResetCommandPoolDelegate(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkAllocateCommandBuffersDelegate(VkDevice device, ref VkCommandBufferAllocateInfo pAllocateInfo, ref VkCommandBuffer pCommandBuffers);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkFreeCommandBuffersDelegate(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, ref VkCommandBuffer pCommandBuffers);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkBeginCommandBufferDelegate(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo pBeginInfo);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkEndCommandBufferDelegate(VkCommandBuffer commandBuffer);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkResetCommandBufferDelegate(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdBindPipelineDelegate(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetViewportDelegate(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewport pViewports);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetScissorDelegate(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, ref VkRect2D pScissors);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetLineWidthDelegate(VkCommandBuffer commandBuffer, float lineWidth);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetDepthBiasDelegate(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetBlendConstantsDelegate(VkCommandBuffer commandBuffer, float blendConstants);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetDepthBoundsDelegate(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetStencilCompareMaskDelegate(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetStencilWriteMaskDelegate(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetStencilReferenceDelegate(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdBindDescriptorSetsDelegate(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet pDescriptorSets, uint dynamicOffsetCount, ref uint pDynamicOffsets);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdBindIndexBufferDelegate(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkIndexType indexType);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdBindVertexBuffersDelegate(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, ref ulong pOffsets);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdDrawDelegate(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdDrawIndexedDelegate(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdDrawIndirectDelegate(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdDrawIndexedIndirectDelegate(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdDispatchDelegate(VkCommandBuffer commandBuffer, uint x, uint y, uint z);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdDispatchIndirectDelegate(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdCopyBufferDelegate(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, ref VkBufferCopy pRegions);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdCopyImageDelegate(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageCopy pRegions);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdBlitImageDelegate(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageBlit pRegions, VkFilter filter);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdCopyBufferToImageDelegate(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkBufferImageCopy pRegions);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdCopyImageToBufferDelegate(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, ref VkBufferImageCopy pRegions);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkCmdUpdateBufferDelegate(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, ulong dstOffset, ulong dataSize, void* pData);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdFillBufferDelegate(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, ulong dstOffset, ulong size, uint data);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdClearColorImageDelegate(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue pColor, uint rangeCount, ref VkImageSubresourceRange pRanges);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdClearDepthStencilImageDelegate(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue pDepthStencil, uint rangeCount, ref VkImageSubresourceRange pRanges);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdClearAttachmentsDelegate(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment pAttachments, uint rectCount, ref VkClearRect pRects);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdResolveImageDelegate(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageResolve pRegions);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdSetEventDelegate(VkCommandBuffer commandBuffer, VkEvent _event, VkPipelineStageFlags stageMask);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdResetEventDelegate(VkCommandBuffer commandBuffer, VkEvent _event, VkPipelineStageFlags stageMask);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdWaitEventsDelegate(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdPipelineBarrierDelegate(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdBeginQueryDelegate(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdEndQueryDelegate(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdResetQueryPoolDelegate(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdWriteTimestampDelegate(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdCopyQueryPoolResultsDelegate(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, ulong dstOffset, ulong stride, VkQueryResultFlags flags);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkCmdPushConstantsDelegate(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdBeginRenderPassDelegate(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo pRenderPassBegin, VkSubpassContents contents);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdNextSubpassDelegate(VkCommandBuffer commandBuffer, VkSubpassContents contents);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdEndRenderPassDelegate(VkCommandBuffer commandBuffer);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate void vkCmdExecuteCommandsDelegate(VkCommandBuffer commandBuffer, uint commandBufferCount, ref VkCommandBuffer pCommandBuffers);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetPhysicalDeviceDisplayPropertiesKHRDelegate(VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref VkDisplayPropertiesKHR pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHRDelegate(VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref VkDisplayPlanePropertiesKHR pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetDisplayPlaneSupportedDisplaysKHRDelegate(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint pDisplayCount, ref VkDisplayKHR pDisplays);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetDisplayModePropertiesKHRDelegate(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref uint pPropertyCount, ref VkDisplayModePropertiesKHR pProperties);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateDisplayModeKHRDelegate(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref VkDisplayModeCreateInfoKHR pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDisplayModeKHR pMode);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetDisplayPlaneCapabilitiesKHRDelegate(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, ref VkDisplayPlaneCapabilitiesKHR pCapabilities);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateDisplayPlaneSurfaceKHRDelegate(VkInstance instance, ref VkDisplaySurfaceCreateInfoKHR pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSurfaceKHR pSurface);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateSharedSwapchainsKHRDelegate(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfoKHR pCreateInfos, VkAllocationCallbacks* pAllocator, ref VkSwapchainKHR pSwapchains);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroySurfaceKHRDelegate(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetPhysicalDeviceSurfaceSupportKHRDelegate(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, ref uint pSupported);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHRDelegate(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref VkSurfaceCapabilitiesKHR pSurfaceCapabilities);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetPhysicalDeviceSurfaceFormatsKHRDelegate(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref uint pSurfaceFormatCount, ref VkSurfaceFormatKHR pSurfaceFormats);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetPhysicalDeviceSurfacePresentModesKHRDelegate(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref uint pPresentModeCount, ref VkPresentModeKHR pPresentModes);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateSwapchainKHRDelegate(VkDevice device, ref VkSwapchainCreateInfoKHR pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSwapchainKHR pSwapchain);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroySwapchainKHRDelegate(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkGetSwapchainImagesKHRDelegate(VkDevice device, VkSwapchainKHR swapchain, ref uint pSwapchainImageCount, ref VkImage pSwapchainImages);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkAcquireNextImageKHRDelegate(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, ref uint pImageIndex);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate VkResult vkQueuePresentKHRDelegate(VkQueue queue, ref VkPresentInfoKHR pPresentInfo);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateWin32SurfaceKHRDelegate(VkInstance instance, ref VkWin32SurfaceCreateInfoKHR pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSurfaceKHR pSurface);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public delegate bool vkGetPhysicalDeviceWin32PresentationSupportKHRDelegate(VkPhysicalDevice physicalDevice, uint queueFamilyIndex);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate VkResult vkCreateDebugReportCallbackEXTDelegate(VkInstance instance, ref VkDebugReportCallbackCreateInfoEXT pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDebugReportCallbackEXT pCallback);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDestroyDebugReportCallbackEXTDelegate(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* pAllocator);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [SuppressUnmanagedCodeSecurity]
    public unsafe delegate void vkDebugReportMessageEXTDelegate(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong _object, ulong location, int messageCode, byte* pLayerPrefix, byte* pMessage);

}
